name: Build OpenWRT 19.07.10 for TL-WR840N v6.2

on:
  workflow_dispatch:
  push:
    paths:
      - '**.patch'
      - '**/openwrt-19.07-tl-wr840n-v6.x/**'
      - '.github/workflows/build-openwrt.yaml'
  pull_request:

jobs:
  build_firmware:
    runs-on: ubuntu-22.04
    env:
      PYTHON_VERSION: "2.7.18"
      PYENV_ROOT: "${{ github.workspace }}/.pyenv"
    steps:
      # Step 1: Checkout source code
      - name: Checkout firmware source
        uses: actions/checkout@v4
        with:
          submodules: true

      # Step 2: Install build prerequisites
      - name: Install native build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk gcc-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils \
            python3-setuptools rsync unzip zlib1g-dev file wget \
            lib32z1-dev libpython3-dev libexpat1-dev libssl-dev \
            python3 p7zip-full python3-pip ccache libbz2-dev \
            libreadline-dev libsqlite3-dev curl llvm lzma-dev tk-dev \
            liblzma-dev openssh-client time

      # Step 3: Install and activate pyenv + Python 2.7.18
      - name: Set up pyenv and Python 2.7.18
        run: |
          git clone --depth=1 https://github.com/pyenv/pyenv.git $PYENV_ROOT
          export PATH="$PYENV_ROOT/bin:$PATH"
          # Install required pyenv build dependencies
          sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
            libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
            libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
          pyenv install $PYTHON_VERSION
          pyenv global $PYTHON_VERSION
          ln -sf $PYENV_ROOT/versions/$PYTHON_VERSION/bin/python $PYENV_ROOT/versions/$PYTHON_VERSION/bin/python2
          export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/versions/$PYTHON_VERSION/bin:$PATH"
          which python
          which python2
          python --version
          python2 --version

      # Step 4: Pre-install CMake 3.16.x (bypass broken 3.15.1 build)
      - name: Install system CMake >= 3.16 and set PATH
        run: |
          sudo apt-get remove -y cmake
          sudo pip3 install cmake==3.16.9
          export PATH="$HOME/.local/bin:$PATH"
          cmake --version

      # Step 5: Download and prepare OpenWRT sources (if separate)
      # (Assume repo already present for simplicity)

      # Step 6: Clean past build artifacts if present
      - name: Clean previous build outputs
        run: |
          if [ -f .config ]; then rm .config; fi

      # Step 7: Configure correct target and profile non-interactively
      - name: Configure target and device profile
        run: |
          make defconfig
          # Ensure .config is generated and correct target/profile selected
          sed -i '/CONFIG_TARGET_ramips_mt76x8_DEVICE_tl-wr840n-v6/d' .config
          echo "CONFIG_TARGET_ramips_mt76x8=y" >> .config
          echo "CONFIG_TARGET_ramips_mt76x8_DEVICE_tl-wr840n-v6=y" >> .config
          make defconfig

      # Step 8: ccache (optional but recommended)
      - name: Enable ccache (optional)
        run: |
          export CC="ccache gcc"
          export CXX="ccache g++"
          which ccache
          ccache -M 300M
          ccache -z

      # Step 9: Build tools (verbose, fail early)
      - name: Build OpenWRT tools (verbose)
        run: |
          make tools/install V=s

      # Step 10: Build toolchain (verbose)
      - name: Build OpenWRT toolchain (verbose)
        run: |
          make toolchain/install V=s

      # Step 11: Build firmware (parallel, verbose)
      - name: Build full firmware (parallel, verbose)
        run: |
          make -j$(nproc) V=s

      # Step 12: Save build logs for debugging (upload on failure too)
      - name: Archive build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            logs/
            .config
            build_dir/target-*/
            feeds.conf*
            tmp/

      # Step 13: Upload sysupgrade firmware image as workflow artifact
      - name: Upload sysupgrade .bin
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-tl-wr840n-v6-sysupgrade
          path: bin/targets/ramips/mt76x8/openwrt-ramips-mt76x8-tl-wr840n-v6-squashfs-sysupgrade.bin
